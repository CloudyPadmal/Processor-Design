`timescale 1 ps / 1 ps
module testDRAM;

    reg [15:0] address;
    reg clock;
    reg [7:0] data;
    reg wren;
    wire [7:0] q;

    // Instantiate RAM
    DRAM RAM (
        .address(address),
        .clock(clock),
        .data(data),
        .wren(wren),
        .q(q)
    );
    
    // Clock for simulation purposes
    initial begin
        // Initiate clock_pulse reg value
        clock = 0;
        forever begin
            #1 clock = ~clock;
        end
    end
    
    // Initialize registers with values
    initial begin
        address = 16'b0000_0000_0000_0000;
        data = 8'b0000_0000;
        wren = 1'b0;
    end
    
    // Test
    initial begin
        #10
        address = 16'b0000_0000_0000_0000;
        data = 8'b0000_0000;
        wren = 1'b0;
        #10
        address = 16'b0100_1110_0100_1100;
        data = 8'b0110_0101;
        wren = 1'b1;
        #10
        address = 16'b1000_0100_0011_0100;
        data = 8'b0011_0100;
        wren = 1'b0;
        #10
        address = 16'b0011_0110_1100_0111;
        data = 8'b0010_0101;
        wren = 1'b1;
        #10
        address = 16'b0000_0000_0000_0000;
        data = 8'b0110_0101;
        wren = 1'b0;
        #10
        address = 16'b1111_0000_1100_0110;
        data = 8'b1111_1111;
        wren = 1'b1;
        #10
        address = 16'b0000_0000_0000_0000;
        data = 8'b0110_0101;
        wren = 1'b0;
        #10
        address = 16'b0000_0000_0000_0000;
        data = 8'b1111_1111;
        wren = 1'b0;
        #10
        $finish;
    end

endmodule